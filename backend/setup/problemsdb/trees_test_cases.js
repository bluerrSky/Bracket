const test_cases = [
// --- Problem 30: Tree Height ---
{ problem_id: 30, input: "5\n4 -1 4 1 1", expected_output: "3", is_sample: true },
{ problem_id: 30, input: "1\n-1", expected_output: "1", is_sample: false },
{ problem_id: 30, input: "3\n-1 0 0", expected_output: "2", is_sample: false },
{ problem_id: 30, input: "4\n-1 0 1 2", expected_output: "4", is_sample: false },
{ problem_id: 30, input: "6\n-1 0 0 1 1 2", expected_output: "3", is_sample: false },
{ problem_id: 30, input: "7\n-1 0 0 1 1 2 3", expected_output: "4", is_sample: false },
{ problem_id: 30, input: "2\n-1 0", expected_output: "2", is_sample: false },
{ problem_id: 30, input: "10\n-1 0 1 2 3 4 5 6 7 8", expected_output: "10", is_sample: false },
{ problem_id: 30, input: "5\n-1 -1 -1 -1 -1", expected_output: "1", is_sample: false },
{ problem_id: 30, input: "8\n-1 0 0 1 1 2 2 3", expected_output: "4", is_sample: false },
{ problem_id: 30, input: "12\n-1 0 1 2 2 3 3 4 4 5 6 7", expected_output: "6", is_sample: false },
{ problem_id: 30, input: "15\n-1 0 1 2 3 4 5 6 7 8 9 10 11 12 13", expected_output: "15", is_sample: false },
{ problem_id: 30, input: "4\n-1 0 0 0", expected_output: "2", is_sample: false },
{ problem_id: 30, input: "6\n-1 0 0 1 2 3", expected_output: "4", is_sample: false },
{ problem_id: 30, input: "9\n-1 0 0 1 2 3 3 3 8", expected_output: "5", is_sample: false },

// --- Problem 31: Number of Leaf Nodes ---
{ problem_id: 31, input: "5\n-1 0 0 1 1", expected_output: "3", is_sample: true },
{ problem_id: 31, input: "1\n-1", expected_output: "1", is_sample: false },
{ problem_id: 31, input: "3\n-1 0 0", expected_output: "2", is_sample: false },
{ problem_id: 31, input: "4\n-1 0 1 2", expected_output: "1", is_sample: false },
{ problem_id: 31, input: "6\n-1 0 0 1 1 2", expected_output: "3", is_sample: false },
{ problem_id: 31, input: "7\n-1 0 0 1 1 2 3", expected_output: "3", is_sample: false },
{ problem_id: 31, input: "2\n-1 0", expected_output: "1", is_sample: false },
{ problem_id: 31, input: "10\n-1 0 1 2 3 4 5 6 7 8", expected_output: "1", is_sample: false },
{ problem_id: 31, input: "5\n-1 -1 -1 -1 -1", expected_output: "5", is_sample: false },
{ problem_id: 31, input: "8\n-1 0 0 1 1 2 2 3", expected_output: "4", is_sample: false },
{ problem_id: 31, input: "12\n-1 0 1 2 2 3 3 4 4 5 6 7", expected_output: "7", is_sample: false },
{ problem_id: 31, input: "15\n-1 0 1 2 3 4 5 6 7 8 9 10 11 12 13", expected_output: "8", is_sample: false },
{ problem_id: 31, input: "4\n-1 0 0 0", expected_output: "3", is_sample: false },
{ problem_id: 31, input: "6\n-1 0 0 1 2 3", expected_output: "4", is_sample: false },
{ problem_id: 31, input: "9\n-1 0 0 1 2 3 3 3 8", expected_output: "5", is_sample: false },

// --- Problem 32: LCA (Lowest Common Ancestor) ---
{ problem_id: 32, input: "5 2\n1 2\n1 3\n3 4\n3 5\n4 5\n2 4", expected_output: "3\n1", is_sample: true },
{ problem_id: 32, input: "4 1\n1 2\n1 3\n3 4\n2 4", expected_output: "1", is_sample: false },
{ problem_id: 32, input: "3 1\n1 2\n1 3\n2 3", expected_output: "1", is_sample: false },
{ problem_id: 32, input: "6 2\n1 2\n1 3\n2 4\n2 5\n3 6\n4 6\n5 6", expected_output: "1\n1", is_sample: false },
{ problem_id: 32, input: "7 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 7\n5 6\n6 7", expected_output: "1\n1\n3", is_sample: false },
{ problem_id: 32, input: "8 4\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n5 7\n6 8\n7 8", expected_output: "1\n2\n3\n3", is_sample: false },
{ problem_id: 32, input: "10 5\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 10\n4 5\n6 7\n8 9\n4 9\n5 10", expected_output: "1\n1\n1\n2\n3", is_sample: false },
{ problem_id: 32, input: "9 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n5 9\n8 9\n6 7\n4 7", expected_output: "1\n3\n1", is_sample: false },
{ problem_id: 32, input: "5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n3 4\n4 5\n5 2\n2 4", expected_output: "1\n1\n1\n1\n1", is_sample: false },
{ problem_id: 32, input: "6 2\n1 2\n1 3\n2 4\n2 5\n3 6\n4 6\n5 6", expected_output: "1\n1", is_sample: false },
{ problem_id: 32, input: "4 2\n1 2\n2 3\n2 4\n3 4", expected_output: "2\n2", is_sample: false },
{ problem_id: 32, input: "7 4\n1 2\n1 3\n3 4\n3 5\n4 6\n5 7\n6 7\n2 4\n3 7\n1 6\n5 6", expected_output: "1\n3\n1\n3", is_sample: false },
{ problem_id: 32, input: "3 1\n1 2\n1 3\n2 3", expected_output: "1", is_sample: false },
{ problem_id: 32, input: "5 1\n1 2\n1 3\n2 4\n2 5\n4 5", expected_output: "2", is_sample: false },

// --- Problem 33: Diameter of Tree ---
{ problem_id: 33, input: "4\n1 2\n2 3\n3 4", expected_output: "3", is_sample: true },
{ problem_id: 33, input: "3\n1 2\n2 3", expected_output: "2", is_sample: false },
{ problem_id: 33, input: "5\n1 2\n2 3\n3 4\n4 5", expected_output: "4", is_sample: false },
{ problem_id: 33, input: "6\n1 2\n2 3\n3 4\n4 5\n5 6", expected_output: "5", is_sample: false },
{ problem_id: 33, input: "8\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n6 8", expected_output: "5", is_sample: false },
{ problem_id: 33, input: "7\n1 2\n2 3\n3 4\n4 5\n5 6\n3 7", expected_output: "5", is_sample: false },
{ problem_id: 33, input: "9\n1 2\n2 3\n3 4\n3 5\n4 6\n5 7\n5 8\n7 9", expected_output: "6", is_sample: false },
{ problem_id: 33, input: "2\n1 2", expected_output: "1", is_sample: false },
{ problem_id: 33, input: "1\n", expected_output: "0", is_sample: false },
{ problem_id: 33, input: "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", expected_output: "9", is_sample: false },
{ problem_id: 33, input: "4\n1 2\n1 3\n1 4", expected_output: "2", is_sample: false },
{ problem_id: 33, input: "5\n1 2\n2 3\n3 4\n4 5", expected_output: "4", is_sample: false },
{ problem_id: 33, input: "6\n1 2\n2 3\n2 4\n3 5\n3 6", expected_output: "4", is_sample: false },
{ problem_id: 33, input: "6\n1 2\n1 3\n3 4\n3 5\n4 6", expected_output: "4", is_sample: false },
{ problem_id: 33, input: "7\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7", expected_output: "5", is_sample: false },

// --- Problem 34: Rooted Tree Distances ---
{ problem_id: 34, input: "5\n1 2\n1 3\n3 4\n3 5", expected_output: "0 1 1 2 2", is_sample: true },
{ problem_id: 34, input: "3\n1 2\n2 3", expected_output: "0 1 2", is_sample: false },
{ problem_id: 34, input: "4\n1 2\n1 3\n1 4", expected_output: "0 1 1 1", is_sample: false },
{ problem_id: 34, input: "6\n1 2\n2 3\n2 4\n3 5\n3 6", expected_output: "0 1 2 2 3 3", is_sample: false },
{ problem_id: 34, input: "1\n", expected_output: "0", is_sample: false },
{ problem_id: 34, input: "2\n1 2", expected_output: "0 1", is_sample: false },
{ problem_id: 34, input: "7\n1 2\n1 3\n2 4\n2 5\n3 6\n6 7", expected_output: "0 1 1 2 2 2 3", is_sample: false },
{ problem_id: 34, input: "5\n1 2\n1 3\n3 4\n4 5", expected_output: "0 1 1 2 3", is_sample: false },
{ problem_id: 34, input: "9\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n6 8\n6 9", expected_output: "0 1 1 2 2 2 2 3 3", is_sample: false },
{ problem_id: 34, input: "8\n1 2\n2 3\n3 4\n3 5\n5 6\n5 7\n7 8", expected_output: "0 1 2 3 3 4 4 5", is_sample: false },
{ problem_id: 34, input: "5\n1 2\n2 3\n2 4\n4 5", expected_output: "0 1 2 2 3", is_sample: false },
{ problem_id: 34, input: "6\n1 2\n1 3\n3 4\n3 5\n5 6", expected_output: "0 1 1 2 2 3", is_sample: false },
{ problem_id: 34, input: "3\n1 2\n1 3", expected_output: "0 1 1", is_sample: false },
{ problem_id: 34, input: "4\n1 2\n2 3\n3 4", expected_output: "0 1 2 3", is_sample: false },

// --- Problem 35: Counting Subtrees ---
{ problem_id: 35, input: "6\n1 2\n1 3\n2 4\n2 5\n3 6", expected_output: "3", is_sample: true },
{ problem_id: 35, input: "4\n1 2\n1 3\n2 4", expected_output: "2", is_sample: false },
{ problem_id: 35, input: "5\n1 2\n1 3\n3 4\n3 5", expected_output: "2", is_sample: false },
{ problem_id: 35, input: "2\n1 2", expected_output: "1", is_sample: false },
{ problem_id: 35, input: "3\n1 2\n2 3", expected_output: "1", is_sample: false },
{ problem_id: 35, input: "7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7", expected_output: "3", is_sample: false },
{ problem_id: 35, input: "1\n", expected_output: "0", is_sample: false },
{ problem_id: 35, input: "8\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n6 8", expected_output: "4", is_sample: false },
{ problem_id: 35, input: "5\n1 2\n2 3\n3 4\n4 5", expected_output: "2", is_sample: false },
{ problem_id: 35, input: "6\n1 2\n1 3\n2 4\n2 5\n3 6\n6 1", expected_output: "3", is_sample: false },

// --- Problem 36: Check if Binary Tree Is BST ---
{ problem_id: 36, input: "3\n2 1 3\n1 -1 -1\n3 -1 -1", expected_output: "YES", is_sample: true },
{ problem_id: 36, input: "3\n2 3 1\n3 -1 -1\n1 -1 -1", expected_output: "NO", is_sample: false },
{ problem_id: 36, input: "1\n10 -1 -1", expected_output: "YES", is_sample: false },
{ problem_id: 36, input: "4\n10 2 3\n2 -1 -1\n3 4 -1\n4 -1 -1", expected_output: "YES", is_sample: false },
{ problem_id: 36, input: "5\n10 2 3\n2 -1 -1\n3 4 5\n4 -1 -1\n5 -1 -1", expected_output: "NO", is_sample: false },
{ problem_id: 36, input: "7\n20 2 3\n10 4 5\n30 6 7\n5 -1 -1\n15 -1 -1\n25 -1 -1\n35 -1 -1", expected_output: "YES", is_sample: false },
{ problem_id: 36, input: "3\n10 2 3\n2 -1 -1\n15 -1 -1", expected_output: "NO", is_sample: false },
{ problem_id: 36, input: "4\n10 2 3\n2 -1 -1\n12 4 -1\n11 -1 -1", expected_output: "NO", is_sample: false },
{ problem_id: 36, input: "6\n50 2 3\n30 4 5\n70 6 -1\n20 -1 -1\n40 -1 -1\n60 -1 -1", expected_output: "YES", is_sample: false },
{ problem_id: 36, input: "6\n50 2 3\n30 4 5\n70 6 -1\n20 -1 -1\n60 -1 -1\n40 -1 -1", expected_output: "NO", is_sample: false },

// --- Problem 37: Count Nodes at Distance K ---
{ problem_id: 37, input: "5 2\n1 2\n1 3\n3 4\n3 5\n1 2\n3 1", expected_output: "2\n3", is_sample: true },
{ problem_id: 37, input: "3 1\n1 2\n2 3\n1 1", expected_output: "1", is_sample: false },
{ problem_id: 37, input: "4 2\n1 2\n2 3\n3 4\n4 3\n1 0", expected_output: "1\n1", is_sample: false },
{ problem_id: 37, input: "6 3\n1 2\n1 3\n2 4\n2 5\n3 6\n1 2\n3 2\n4 1", expected_output: "3\n2\n1", is_sample: false },
{ problem_id: 37, input: "7 2\n1 2\n1 3\n2 4\n3 5\n4 6\n6 7\n2 3\n5 0", expected_output: "2\n1", is_sample: false },
{ problem_id: 37, input: "5 5\n1 2\n1 3\n3 4\n3 5\n1 0\n1 1\n1 2\n3 1\n5 2", expected_output: "1\n2\n2\n2\n0", is_sample: false },
{ problem_id: 37, input: "4 4\n1 2\n1 3\n3 4\n2 2\n3 1\n4 0\n1 3", expected_output: "1\n2\n1\n0", is_sample: false },
{ problem_id: 37, input: "9 2\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8\n7 9\n1 3\n2 1", expected_output: "4\n3", is_sample: false },
{ problem_id: 37, input: "2 1\n1 2\n1 1", expected_output: "1", is_sample: false },
{ problem_id: 37, input: "3 2\n1 2\n2 3\n3 2\n3 0", expected_output: "1\n1", is_sample: false },

// --- Problem 38: Serialize and Deserialize Binary Tree ---
// Because serialization format and verification vary widely, supply minimal sample tests for basic correctness;
{ problem_id: 38, input: "[]", expected_output: "[]", is_sample: true },
{ problem_id: 38, input: "[1,null,2,3]", expected_output: "[1,null,2,3]", is_sample: false },
// Additional tests depend on your platform specification

];

module.exports = { test_cases };
